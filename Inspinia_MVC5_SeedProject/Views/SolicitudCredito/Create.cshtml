@model ERP_GMEDINA.Models.tbSolicitudCredito
@using ERP_GMEDINA.Models
@{
    ViewBag.Title = "SC";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>Solicitud de Crédito</h2>

    </div>
    <div class="col-sm-8">
        <div class="title-action">
            <a href="/SolicitudCredito/Index">Regresar</a>
        </div>
    </div>
</div>
<style>
    .AsteriscoRojo:after {
        content: "*";
        color: red;
    }
</style>


<div class="wrapper wrapper-content">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Ingresar Solicitud de Crédito</h5>
                </div>
                <div class="ibox-content">

                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">
                            @Html.ValidationSummary(true)
                            @Html.HiddenFor(model => model.cred_DiasAprobado)
                            @Html.HiddenFor(model => model.cred_FechaAprobacion)
                            @Html.HiddenFor(model => model.cred_MontoAprobado)





                            @* Datos de Cliente *@
                            <div>
                                @*<label class="control-label col-md-2">Número Cliente</label>*@
                                @*<div class="col-md-4">
                                        @Html.EditorFor(model => model.clte_Id)
                                        <p style="color:red">@Html.ValidationMessageFor(model => model.clte_Id)
                                    </div>*@
                                <div class="form-group">
                                    <div class="col-md-3">
                                        @Html.HiddenFor(model => model.clte_Id)
                                        @*@Html.ValidationMessageFor(model => model.clte_Id)*@
                                    </div>
                                </div>

                                @*<div class="col-md-1">
                                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#ModalAgregarClientes"><span class="glyphicon glyphicon-search"></span></button>
                                    </div>*@
                            </div>
                            <div class="form-group">
                                <label class="control-label AsteriscoRojo col-md-2">Identificación</label>
                                @*@Html.LabelFor(model => model.tbCliente.clte_Identificacion, new { @class = "control-label col-md-2" })*@
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.tbCliente.clte_Identificacion, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    <p style="color:red">@Html.ValidationMessageFor(model => model.clte_Id)
                                </div>
                                <div class="col-md-1">
                                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#ModalAgregarClientes"><span class="glyphicon glyphicon-search"></span></button>
                                </div>
                                <div class="form-group">
                                    <label class="control-label AsteriscoRojo col-md-1">Cliente</label>
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.tbCliente.clte_Nombres, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.tbCliente.clte_Nombres)
                                    </div>
                                </div>
                            </div>
                            @* Fin datos de cliente *@
                            <div class="form-group">
                                @Html.LabelFor(model => model.cred_FechaSolicitud, new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.cred_FechaSolicitud, "{0:MM/dd/yyyy}", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.cred_FechaSolicitud)
                                </div>
                                <div class="form-group">
                                    <label class="control-label col-md-2">Estado</label>
                                    @*@Html.LabelFor(model => model.cred_MontoAprobado, new { @class = "control-label col-md-2" })*@
                                    <div class="col-md-3">
                                        @Html.DropDownList("escre_Id", (IEnumerable<SelectListItem>)ViewBag.escre_Descripcion, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
                                        <p style="color:red">@Html.ValidationMessageFor(model => model.escre_Id)
                                    </div>
                                </div>
                            </div>




                            <div class="form-group">
                                @Html.LabelFor(model => model.cred_MontoSolicitado, new { @class = "control-label AsteriscoRojo col-md-2" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.cred_MontoSolicitado, new { htmlAttributes = new { @onkeypress = "return validar(event)" } })
                                    <p style="color:red">@Html.ValidationMessageFor(model => model.cred_MontoSolicitado)
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.cred_DiasSolicitado, new { @class = "control-label AsteriscoRojo col-md-2" })
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(model => model.cred_DiasSolicitado, new { @onkeypress = "return validar(event)", @class = "form-control", maxlength = 3 })
                                        @*<input class="form-control" type="text" name="cred_DiasSolicitado" id="cred_DiasSolicitado" maxlength="3" onkeypress = "return validar(event)" />*@
                                        <p style="color:red">@Html.ValidationMessageFor(model => model.cred_DiasSolicitado)
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Guardar" class="btn btn-primary" />
                                    @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-white" })
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
</div>


<div>
    <div class="modal fade" id="ModalAgregarClientes" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title" id="myModalLabel">Agregar Cliente</h4>
                </div>

                <div class="modal-body" id="frmEditarMunicipios">
                    @Html.Partial("_IndexCliente", (IEnumerable<tbCliente>)ViewBag.Cliente)
                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(function () {
            $("#cred_FechaAprobacion").datepicker({ dateFormat: 'mm/dd/yy' });
            $("#cred_FechaSolicitud").datepicker({ dateFormat: 'mm/dd/yy' }).datepicker('setDate', new Date()).datepicker("destroy");
            //$("#cred_FechaSolicitud").datepicker({ dateFormat: 'yy/mm/dd' });
        });
    </script>
    <script>

        function validar(e) {
            tecla = (document.all) ? e.keyCode : e.which;
            tecla = String.fromCharCode(tecla)
            return /^[0-9\-]+$/.test(tecla);
        }
    </script>

    <script src="~/Scripts/app/Clientes-Pedido-Credito.js"></script>
    <script src="~/Scripts/app/Datepicker.js"></script>

    <script>
        //--------------------Milecimas y decimales-------------------
        function MASK(form, n, mask, format) {
            if (format == "undefined") format = false;
            if (format || NUM(n)) {
                dec = 0, point = 0;
                x = mask.indexOf(".") + 1;
                if (x) { dec = mask.length - x; }

                if (dec) {
                    n = NUM(n, dec) + "";
                    x = n.indexOf(".") + 1;
                    if (x) { point = n.length - x; } else { n += "."; }
                } else {
                    n = NUM(n, 0) + "";
                }
                for (var x = point; x < dec ; x++) {
                    n += "0";
                }
                x = n.length, y = mask.length, XMASK = "";
                while (x || y) {
                    if (x) {
                        while (y && "#0.".indexOf(mask.charAt(y - 1)) == -1) {
                            if (n.charAt(x - 1) != "-")
                                XMASK = mask.charAt(y - 1) + XMASK;
                            y--;
                        }
                        XMASK = n.charAt(x - 1) + XMASK, x--;
                    } else if (y && "L0".indexOf(mask.charAt(y - 1)) + 1) {
                        XMASK = mask.charAt(y - 1) + XMASK;
                    }
                    if (y) { y-- }
                }
            } else {
                XMASK = "";
            }
            if (form) {
                form.value = XMASK;
                if (NUM(n) < 0) {
                    form.style.color = "#FF0000";
                } else {
                    form.style.color = "#000000";
                }
            }
            return XMASK;
        }

        function NUM(s, dec) {
            for (var s = s + "", num = "", x = 0 ; x < s.length ; x++) {
                c = s.charAt(x);
                if (".-+/*".indexOf(c) + 1 || c != " " && !isNaN(c)) { num += c; }
            }
            if (isNaN(num)) { num = eval(num); }
            if (num == "") { num = 0; } else { num = parseFloat(num); }
            if (dec != undefined) {
                r = .5; if (num < 0) r = -r;
                e = Math.pow(10, (dec > 0) ? dec : 0);
                return parseInt(num * e + r) / e;
            } else {
                return num;
            }
        }
    </script>

}

