@model ERP_GMEDINA.Models.tbSolicitudCredito
@using ERP_GMEDINA.Models

@{
    ViewBag.Title = "SC";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Content/css/Auditoria.css" rel="stylesheet" />

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>Solicitud de Crédito</h2>

    </div>
    <div class="col-sm-8">
        <div class="title-action">
            <a href="/SolicitudCredito/IndexSolicitud">Regresar</a>
            @*@Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary"})*@
        </div>
    </div>
</div>




<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Editar Solicitud de Crédito</h5>
                </div>
                <div class="ibox-content">

                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">

                            @Html.ValidationSummary(true)
                            @Html.HiddenFor(model => model.cred_Id)
                            @Html.Hidden("RedirectTo", Url.Action("Index", "SolicitudCredito"))
                            @Html.HiddenFor(model => model.cred_FechaCrea)
                            @Html.HiddenFor(model => model.cred_UsuarioCrea)

                            @Html.HiddenFor(model => model.cred_FechaAprobacion)

                            @*@Html.HiddenFor(model => model.tbCliente.clte_EsPersonaNatural)*@


                            <div class="form-group">
                                @Html.LabelFor(model => model.cred_Id, new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.cred_Id, new { htmlAttributes = new { @class = "form-control", disabled = "disabled", @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.cred_Id)
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.cred_FechaSolicitud, new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.cred_FechaSolicitud, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.cred_FechaSolicitud)
                                    </div>
                                </div>
                            </div>

                            @*ERROR INICIO  *@
                            <div class="form-group">
                                <label class="control-label col-md-2">Identificación </label>
                                @*@Html.LabelFor(model => model.tbCliente.clte_Identificacion, new { @class = "control-label col-md-2" })*@
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.tbCliente.clte_Identificacion, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                    @Html.HiddenFor(model => model.clte_Id)
                                    <p style="color:red">@Html.ValidationMessageFor(model => model.clte_Id)
                                </div>
                                <div class="col-md-1">
                                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#ModalAgregarClientes"><span class="glyphicon glyphicon-search"></span></button>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.tbCliente.clte_Nombres, new { @class = "control-label col-md-1" })
                                    <div class="col-md-3">
                                        @if (Model.tbCliente.clte_EsPersonaNatural == true)
                                        {
                                            @Html.EditorFor(model => model.tbCliente.clte_Nombres, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                            <p style="color:red">
                                                @Html.ValidationMessageFor(model => model.tbCliente.clte_Nombres)&nbsp;
                                                @Html.ValidationMessageFor(model => model.tbCliente.clte_Apellidos)
                                            </p>
                                            @Html.HiddenFor(model => model.tbCliente.clte_NombreComercial)
                                        }
                                        else
                                        {
                                            @Html.EditorFor(model => model.tbCliente.clte_NombreComercial, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                            <p style="color:red"><span class="validation-error">@Html.ValidationMessageFor(model => model.tbCliente.clte_NombreComercial)</span></p>
                                            @Html.HiddenFor(model => model.tbCliente.clte_Nombres)
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.cred_MontoSolicitado, new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.EditorFor(model => model.cred_MontoSolicitado, new { htmlAttributes = new { @onkeypress = "return validar(event)" } })
                                    <p id="Monto" style="color:red">@Html.ValidationMessageFor(model => model.cred_MontoSolicitado)
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.cred_MontoAprobado, new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.cred_MontoAprobado, new { htmlAttributes = new { @class = "form-control", disabled = "disabled", @readonly = "readonly" } })
                                        @Html.ValidationMessageFor(model => model.cred_MontoAprobado)
                                    </div>
                                </div>
                            </div>

                           

                            <div class="form-group">
                                @Html.LabelFor(model => model.cred_DiasSolicitado, new { @class = "control-label col-md-2" })
                                <div class="col-md-3">
                                    @Html.TextBoxFor(model => model.cred_DiasSolicitado, new { @onkeypress = "return validar(event)", @class = "form-control", maxlength = 3 })
                                    <p style="color:red">@Html.ValidationMessageFor(model => model.cred_DiasSolicitado)
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.cred_DiasAprobado, new { @class = "control-label col-md-2" })
                                    <div class="col-md-3">
                                        @Html.EditorFor(model => model.cred_DiasAprobado, new { htmlAttributes = new { @class = "form-control", disabled = "disabled", @readonly = "readonly", @onkeypress = "return validar(event)" } })
                                        @Html.ValidationMessageFor(model => model.cred_DiasAprobado)
                                    </div>
                                </div>
                            </div>
                          
                            <div class="form-group">
                                <label class="control-label col-md-2">Estado </label>
                                <div class="col-md-3">
                                    @Html.DropDownList("escre_Id", (IEnumerable<SelectListItem>)ViewBag.escre_Descripcion, htmlAttributes: new { @class = "form-control", @disabled = "disabled" })                                 
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Guardar" id="btnGuardar" class="btn btn-primary" />
                                    @Html.ActionLink("Cancelar", "IndexSolicitud", null, new { @class = "btn btn-white" })
                                </div>
                            </div>
                        </div>
                    }


                </div>
            </div>

            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Auditoría</h5>
                </div>
                <div class="ibox-content">
                    <table class="table table table-striped  table-bordered">
                        <tr>
                            <th>Acción</th>
                            <th>Usuario</th>
                            <th>Fecha</th>
                        </tr>
                        <tr>
                            <td>Creado</td>
                            <td>
                                @Html.DisplayFor(model => model.tbUsuario.usu_Nombres)
                                @Html.DisplayFor(model => model.tbUsuario.usu_Apellidos)
                            </td>
                            <td>@Html.DisplayFor(model => model.cred_FechaCrea)</td>
                        </tr>
                        <tr>
                            <td>Modificado</td>
                            <td>
                                @Html.DisplayFor(model => model.tbUsuario1.usu_Nombres)
                                @Html.DisplayFor(model => model.tbUsuario1.usu_Apellidos)
                            </td>
                            <td>@Html.DisplayFor(model => model.cred_FechaModifica)</td>
                        </tr>
                    </table>
                </div>
            </div>

        </div>
    </div>
</div>

<div>
    <div class="modal fade" id="AprobarSolicitud" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title" id="myModalLabel">Aprobar Solicitud de Crédito</h4>
                </div>
                <div class="modal-body" id="frmEditarMunicipios">
                    @*@Html.Partial("_ListAprobacion", (List<tbSolicitudCredito>)ViewBag.Aprobacion)*@
                    @Html.Partial("_AprobarSolicitudCredito", new ERP_GMEDINA.Models.tbSolicitudCredito()
               {
                   cred_Id = Model.cred_Id,
                   escre_Id = Model.escre_Id,
                   cred_DiasAprobado = Model.cred_DiasAprobado,
                   cred_DiasSolicitado = Model.cred_DiasSolicitado,
                   cred_MontoAprobado = Model.cred_MontoAprobado,
                   cred_MontoSolicitado = Model.cred_MontoSolicitado,
                   cred_FechaAprobacion = Model.cred_FechaAprobacion,
                   cred_UsuarioCrea = Model.cred_UsuarioCrea,
                   cred_FechaCrea = Model.cred_FechaCrea,
                   cred_FechaModifica = Model.cred_FechaModifica,
                   cred_UsuarioModifica = Model.cred_UsuarioModifica
               })
                </div>
            </div>
        </div>
    </div>
</div>

@*//---------------------------modal anular Anular_@item.cred_Id*@
<div class="modal fade" id="Anular" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Denegar Solicitud Crédito</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                ¿Está seguro de Denegar esta Solicitud De Crédito?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="AnularSolictud();" data-dismiss="modal">Si</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<div>
    <div class="modal fade" id="ModalAgregarClientes" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title" id="myModalLabel">Agregar Cliente</h4>
                </div>

                <div class="modal-body" id="frmEditarMunicipios">
                    @Html.Partial("_IndexCliente", (IEnumerable<tbCliente>)ViewBag.Cliente)
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    function validar(e) {
        tecla = (document.all) ? e.keyCode : e.which;
        tecla = String.fromCharCode(tecla)
        return /^[0-9\-]+$/.test(tecla);
    }
</script>

<script src="~/Scripts/jquery-3.4.1.js"></script>
<script src="~/Scripts/app/SolicituCreditoDenegar.js"></script>
<script src="~/Scripts/app/Clientes-Pedido-Credito.js"></script>
<script src="~/Scripts/app/SolicitudCredito.js"></script>
<script src="~/Scripts/app/Datepicker.js"></script>

<script>
    //<!--rn vez del id se pone :#cred_FechaAprobacion -->
    $(function () {
        $("#cred_FechaAprobacion").datepicker({ dateFormat: 'yy-mm-dd' });
        $("#cred_FechaSolicitud").datepicker({ dateFormat: 'dd/mm/yy' }).datepicker("destroy");
    });
    //VALIDACIONES
    $('#AceptarAprobacion').click(function () {

        if ($('#cred_MontoAprobado').val() == 0) {
            alert('El valor no puede ser cero');
        }

        else if ($('#cred_MontoAprobado').val() == '') {
            alert('El Campo Monto Aprobado debe de ir lleno');
        }


    });

</script>
<script>
    //--------------------Milecimas y decimales-------------------
    function MASK(form, n, mask, format) {
        if (format == "undefined") format = false;
        if (format || NUM(n)) {
            dec = 0, point = 0;
            x = mask.indexOf(".") + 1;
            if (x) { dec = mask.length - x; }

            if (dec) {
                n = NUM(n, dec) + "";
                x = n.indexOf(".") + 1;
                if (x) { point = n.length - x; } else { n += "."; }
            } else {
                n = NUM(n, 0) + "";
            }
            for (var x = point; x < dec ; x++) {
                n += "0";
            }
            x = n.length, y = mask.length, XMASK = "";
            while (x || y) {
                if (x) {
                    while (y && "#0.".indexOf(mask.charAt(y - 1)) == -1) {
                        if (n.charAt(x - 1) != "-")
                            XMASK = mask.charAt(y - 1) + XMASK;
                        y--;
                    }
                    XMASK = n.charAt(x - 1) + XMASK, x--;
                } else if (y && "L0".indexOf(mask.charAt(y - 1)) + 1) {
                    XMASK = mask.charAt(y - 1) + XMASK;
                }
                if (y) { y-- }
            }
        } else {
            XMASK = "";
        }
        if (form) {
            form.value = XMASK;
            if (NUM(n) < 0) {
                form.style.color = "#FF0000";
            } else {
                form.style.color = "#000000";
            }
        }
        return XMASK;
    }

    function NUM(s, dec) {
        for (var s = s + "", num = "", x = 0 ; x < s.length ; x++) {
            c = s.charAt(x);
            if (".-+/*".indexOf(c) + 1 || c != " " && !isNaN(c)) { num += c; }
        }
        if (isNaN(num)) { num = eval(num); }
        if (num == "") { num = 0; } else { num = parseFloat(num); }
        if (dec != undefined) {
            r = .5; if (num < 0) r = -r;
            e = Math.pow(10, (dec > 0) ? dec : 0);
            return parseInt(num * e + r) / e;
        } else {
            return num;
        }
    }
</script>


